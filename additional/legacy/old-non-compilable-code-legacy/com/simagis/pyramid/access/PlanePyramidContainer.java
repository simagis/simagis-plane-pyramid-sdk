package com.simagis.pyramid.access;

import com.simagis.images.MatrixContext;
import com.simagis.images.MatrixND;
import com.simagis.images.SimpleMatrixContext;
import net.algart.simagis.pyramid.sources.DefaultPlanePyramidSource;
import com.simagis.pyramid.standard.PlanePyramid;
import net.algart.simagis.pyramid.PlanePyramidSource;
import com.simagis.pyramid.io.DefaultPlanePyramidIO;
import net.algart.arrays.ExternalProcessor;
import net.algart.arrays.JArrays;
import net.algart.arrays.Matrix;
import net.algart.arrays.PArray;
import net.algart.contexts.Context;
import net.algart.contexts.DefaultArrayContext;
import org.json.JSONException;
import org.json.JSONObject;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

// Note: some methods of this class are textually cloned in com.simagis.pyramid.io.DefaultPlanePyramidIO

@FieldsArgs({
    //[[Repeat() m0 ==> m$INDEX(start=1),,...(19)]]
    "m0", //[[Repeat.AutoGeneratedStart !! Auto-generated: NOT EDIT !! ]]
    "m1",
    "m2",
    "m3",
    "m4",
    "m5",
    "m6",
    "m7",
    "m8",
    "m9",
    "m10",
    "m11",
    "m12",
    "m13",
    "m14",
    "m15",
    "m16",
    "m17",
    "m18",
    "m19", //[[Repeat.AutoGeneratedEnd]]
    "numberOfResolutions",
    "metadata"
})
public class PlanePyramidContainer {
    private MatrixND[] m = new MatrixND[PlanePyramid.MAX_NUMBER_OF_RESOLUTIONS_IN_DIRECTORY];
    private int numberOfResolutions = 0;
    private String metadata = "{}";

    public PlanePyramidContainer() {
    }

    public PlanePyramidContainer(Context context, PlanePyramid pyramid) {
        this(context, pyramid.packedImagePyramid());
        JSONObject metadata = DefaultPlanePyramidIO.metadataJson(pyramid);
        try {
            this.metadata = metadata.toString(4);
        } catch (JSONException e) {
            throw new AssertionError(e);
        }
    }

    public PlanePyramidContainer(Context context, List<? extends Matrix<? extends PArray>> pyramid) {
        MatrixContext matrixContext = context.as(MatrixContext.class);
        int n = 0;
        for (Matrix<? extends PArray> matrix : pyramid) {
            if (n == m.length) {
                break;
            }
            m[n++] = matrix == null ? null : matrixContext.newMatrixND(context, matrix);
        }
        this.numberOfResolutions = n;
        this.metadata = "{\"numberOfResolutions\":" + n + "}";
    }

    public PlanePyramidSource toPlanePyramidSource(Context context) throws JSONException {
        DefaultArrayContext arrayContext = context == null ? null : new DefaultArrayContext(context);
        List<Matrix<? extends PArray>> matrices = new ArrayList<Matrix<? extends PArray>>();
        for (int k = 0; k < numberOfResolutions; k++) {
            matrices.add(m[k] == null ? null : m[k].m());
        }
        return new DefaultPlanePyramidSource(arrayContext, matrices);
    }

    // Please avoid this variant if you are going to read large matrices via getImage method!
    public PlanePyramid toPlanePyramid() throws JSONException {
        return toPlanePyramid((Context) null);
    }

    public PlanePyramid toPlanePyramid(Context context) throws JSONException {
        return toPlanePyramid(toPlanePyramidSource(context));
    }

    @SuppressWarnings("unchecked")
    public PlanePyramid toPlanePyramid(PlanePyramidSource pyramidSource) throws JSONException {
        return DefaultPlanePyramidIO.toPlanePyramid(pyramidSource, metadata);
    }

    public void share(Context context, File directory) throws IOException {
        MatrixContext mc = context == null ? SimpleMatrixContext.getInstance() : context.as(MatrixContext.class);
        directory.mkdirs();
        for (int k = 0; k < numberOfResolutions; k++) {
            File matrixFile = new File(directory, "m" + k);
            if (m[k] != null) {
                mc.shareMatrixND(m[k], matrixFile.getAbsolutePath());
            } else {
                matrixFile.delete();
            }
        }
        ExternalProcessor.writeUTF8(new File(directory, "index.json"), metadata);
    }

    // context may be null
    public static PlanePyramidContainer open(Context context, File directory) throws IOException {
        File indexFile = new File(directory, "index.json");
        String metadata = ExternalProcessor.readUTF8(indexFile);
        return open(context, directory, metadata);
    }

    public static PlanePyramidContainer open(Context context, File directory, String metadata) throws IOException {
        MatrixContext mc = context == null ? SimpleMatrixContext.getInstance() : context.as(MatrixContext.class);
        PlanePyramidContainer result = new PlanePyramidContainer();
        try {
            JSONObject metaInfo = metadata == null ? new JSONObject() : new JSONObject(metadata);
            int numberOfResolutions = metaInfo.getInt("numberOfResolutions");
            if (numberOfResolutions < 0 || numberOfResolutions > PlanePyramid.MAX_NUMBER_OF_RESOLUTIONS_IN_DIRECTORY)
                throw new IllegalArgumentException("numberOfResolutions = " + numberOfResolutions
                    + " in metadata is not in range 0.." + PlanePyramid.MAX_NUMBER_OF_RESOLUTIONS_IN_DIRECTORY);
            MatrixND[] matrices = new MatrixND[numberOfResolutions];
            for (int k = 0; k < numberOfResolutions; k++) {
                File matrixFile = new File(directory, "m" + k);
                matrices[k] = matrixFile.exists() ? mc.openMatrixND(matrixFile.getAbsolutePath()) : null;
            }
            result.setMatrices(matrices);
            result.setMetadata(metadata);
        } catch (JSONException e) {
            IOException exception = new IOException("Illegal format of index file: " + e);
            exception.initCause(e);
            throw exception;
        }
        return result;
    }

    //[[Repeat() m\[0\] ==> m[$INDEX(start=1)],,...(19);;
    //           m0 ==> m$INDEX(start=1),,...(19);;
    //           M0 ==> M$INDEX(start=1),,...(19)]]
    @Name("m0")
    public MatrixND getM0() {
        return this.m[0];
    }

    @Name("m0")
    public void setM0(MatrixND m) {
        this.m[0] = m;
    }
    //[[Repeat.AutoGeneratedStart !! Auto-generated: NOT EDIT !! ]]
    @Name("m1")
    public MatrixND getM1() {
        return this.m[1];
    }

    @Name("m1")
    public void setM1(MatrixND m) {
        this.m[1] = m;
    }
    @Name("m2")
    public MatrixND getM2() {
        return this.m[2];
    }

    @Name("m2")
    public void setM2(MatrixND m) {
        this.m[2] = m;
    }
    @Name("m3")
    public MatrixND getM3() {
        return this.m[3];
    }

    @Name("m3")
    public void setM3(MatrixND m) {
        this.m[3] = m;
    }
    @Name("m4")
    public MatrixND getM4() {
        return this.m[4];
    }

    @Name("m4")
    public void setM4(MatrixND m) {
        this.m[4] = m;
    }
    @Name("m5")
    public MatrixND getM5() {
        return this.m[5];
    }

    @Name("m5")
    public void setM5(MatrixND m) {
        this.m[5] = m;
    }
    @Name("m6")
    public MatrixND getM6() {
        return this.m[6];
    }

    @Name("m6")
    public void setM6(MatrixND m) {
        this.m[6] = m;
    }
    @Name("m7")
    public MatrixND getM7() {
        return this.m[7];
    }

    @Name("m7")
    public void setM7(MatrixND m) {
        this.m[7] = m;
    }
    @Name("m8")
    public MatrixND getM8() {
        return this.m[8];
    }

    @Name("m8")
    public void setM8(MatrixND m) {
        this.m[8] = m;
    }
    @Name("m9")
    public MatrixND getM9() {
        return this.m[9];
    }

    @Name("m9")
    public void setM9(MatrixND m) {
        this.m[9] = m;
    }
    @Name("m10")
    public MatrixND getM10() {
        return this.m[10];
    }

    @Name("m10")
    public void setM10(MatrixND m) {
        this.m[10] = m;
    }
    @Name("m11")
    public MatrixND getM11() {
        return this.m[11];
    }

    @Name("m11")
    public void setM11(MatrixND m) {
        this.m[11] = m;
    }
    @Name("m12")
    public MatrixND getM12() {
        return this.m[12];
    }

    @Name("m12")
    public void setM12(MatrixND m) {
        this.m[12] = m;
    }
    @Name("m13")
    public MatrixND getM13() {
        return this.m[13];
    }

    @Name("m13")
    public void setM13(MatrixND m) {
        this.m[13] = m;
    }
    @Name("m14")
    public MatrixND getM14() {
        return this.m[14];
    }

    @Name("m14")
    public void setM14(MatrixND m) {
        this.m[14] = m;
    }
    @Name("m15")
    public MatrixND getM15() {
        return this.m[15];
    }

    @Name("m15")
    public void setM15(MatrixND m) {
        this.m[15] = m;
    }
    @Name("m16")
    public MatrixND getM16() {
        return this.m[16];
    }

    @Name("m16")
    public void setM16(MatrixND m) {
        this.m[16] = m;
    }
    @Name("m17")
    public MatrixND getM17() {
        return this.m[17];
    }

    @Name("m17")
    public void setM17(MatrixND m) {
        this.m[17] = m;
    }
    @Name("m18")
    public MatrixND getM18() {
        return this.m[18];
    }

    @Name("m18")
    public void setM18(MatrixND m) {
        this.m[18] = m;
    }
    @Name("m19")
    public MatrixND getM19() {
        return this.m[19];
    }

    @Name("m19")
    public void setM19(MatrixND m) {
        this.m[19] = m;
    }
    //[[Repeat.AutoGeneratedEnd]]


    public MatrixND[] getMatrices() {
        return m.clone();
    }

    public void setMatrices(MatrixND[] m) {
        if (m.length == 0)
            throw new IllegalArgumentException("Empty matrices array");
        if (m.length > this.m.length)
            throw new IllegalArgumentException("Too large matrices array (>" + this.m.length + " elements)");
        JArrays.fillObjectArray(this.m, null);
        System.arraycopy(m, 0, this.m, 0, m.length);
        this.numberOfResolutions = m.length;
    }

    @Name("numberOfResolutions")
    public int getNumberOfResolutions() {
        return numberOfResolutions;
    }

    @Name("numberOfResolutions")
    public void setNumberOfResolutions(int numberOfResolutions) {
        if (numberOfResolutions < 0 || numberOfResolutions > this.m.length)
            throw new IllegalArgumentException("numberOfResolutions = " + numberOfResolutions
                + " is not in range 0.." + this.m.length);
        this.numberOfResolutions = numberOfResolutions;
    }

    @Name("metadata")
    public String getMetadata() {
        return metadata;
    }

    @Name("metadata")
    public void setMetadata(String metadata) {
        this.metadata = metadata;
    }
}
